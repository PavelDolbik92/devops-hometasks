name: Release Charts

on:
  workflow_dispatch:

jobs:
  release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      #- name: Install Helm
      #  uses: azure/setup-helm@v3

      # Use the action to generate a tag for itself
      - name: Test action main1 (with_v true)
        id: test_main1
        env:
          DRY_RUN: true
          WITH_V: true
          VERBOSE: true
          DEFAULT_BUMP: minor # default
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action main2 (with_v false)
        id: test_main2
        env:
          DRY_RUN: true
          WITH_V: false
          VERBOSE: true
          DEFAULT_BUMP: major
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action main3 (with_v false)
        id: test_main3
        uses: ./
        env:
          DRY_RUN: true
          WITH_V: false
          VERBOSE: true
          DEFAULT_BUMP: none
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action main4 (with_v true)
        id: test_main4
        uses: ./
        env:
          DRY_RUN: true
          WITH_V: true
          VERBOSE: true
          DEFAULT_BUMP: none
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action main5 (with_v true)
        id: test_main5
        uses: ./
        env:
          DRY_RUN: true
          WITH_V: true
          VERBOSE: true
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Use the action to generate a tag for itself
      - name: Test action pre1-release (with_v true)
        id: test_pre1
        uses: ./
        env:
          DRY_RUN: true
          WITH_V: true
          PRERELEASE: true
          PRERELEASE_SUFFIX: test
          VERBOSE: true
          DEFAULT_BUMP: minor # default
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action pre2-release (with_v false)
        id: test_pre2
        uses: ./
        env:
          DRY_RUN: true
          WITH_V: false
          PRERELEASE: true
          PRERELEASE_SUFFIX: test
          VERBOSE: true
          DEFAULT_BUMP: major
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check if the action created the expected output
      - name: Check if the tag would have been created
        shell: bash
        run: |
          set -x
          MAIN1_OUTPUT_TAG=${{ steps.test_main1.outputs.old_tag }}
          MAIN1_OUTPUT_NEWTAG=${{ steps.test_main1.outputs.new_tag }}
          MAIN1_OUTPUT_PART=${{ steps.test_main1.outputs.part }}
          PRE1_OUTPUT_TAG=${{ steps.test_pre1.outputs.old_tag }}
          PRE1_OUTPUT_NEWTAG=${{ steps.test_pre1.outputs.new_tag }}
          PRE1_OUTPUT_PART=${{ steps.test_pre1.outputs.part }}
          
          MAIN2_OUTPUT_TAG=${{ steps.test_main2.outputs.old_tag }}
          MAIN2_OUTPUT_NEWTAG=${{ steps.test_main2.outputs.new_tag }}
          MAIN2_OUTPUT_PART=${{ steps.test_main2.outputs.part }}
          PRE2_OUTPUT_TAG=${{ steps.test_pre2.outputs.old_tag }}
          PRE2_OUTPUT_NEWTAG=${{ steps.test_pre2.outputs.new_tag }}
          PRE2_OUTPUT_PART=${{ steps.test_pre2.outputs.part }}
          
          MAIN3_OUTPUT_TAG=${{ steps.test_main3.outputs.old_tag }}
          MAIN3_OUTPUT_NEWTAG=${{ steps.test_main3.outputs.new_tag }}
          MAIN3_OUTPUT_PART=${{ steps.test_main3.outputs.part }}
          
          MAIN4_OUTPUT_TAG=${{ steps.test_main4.outputs.old_tag }}
          MAIN4_OUTPUT_NEWTAG=${{ steps.test_main4.outputs.new_tag }}
          MAIN4_OUTPUT_PART=${{ steps.test_main4.outputs.part }}
          
          MAIN5_OUTPUT_TAG=${{ steps.test_main5.outputs.old_tag }}
          MAIN5_OUTPUT_NEWTAG=${{ steps.test_main5.outputs.new_tag }}
          MAIN5_OUTPUT_PART=${{ steps.test_main5.outputs.part }}
          
          echo -e "> MAIN tests with_v, default bump:\n" >> $GITHUB_STEP_SUMMARY
          
          echo "MAIN1 with_v Tag: $MAIN1_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN1 with_v New tag: $MAIN1_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN1 with_v Part: $MAIN1_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> Pre-release tests with_v, default bump:\n" >> $GITHUB_STEP_SUMMARY
          
          echo "PRE1 with_v Tag: $PRE1_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "PRE1 with_v New tag: $PRE1_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "PRE1 with_v Part: $PRE1_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> MAIN tests without_v, bump major:\n" >> $GITHUB_STEP_SUMMARY
          
          echo "MAIN2 without_v Tag: $MAIN2_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN2 without_v New tag: $MAIN2_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN2 without_v Part: $MAIN2_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> Pre-release tests without_v, bump major:\n" >> $GITHUB_STEP_SUMMARY
          
          echo "PRE2 without_v Tag: $PRE2_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "PRE2 without_v New tag: $PRE2_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "PRE2 without_v Part: $PRE2_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> MAIN tests without_v, bump none: (should be the same old tag no change regardless of what original tag contains or not v)\n" >> $GITHUB_STEP_SUMMARY
          
          echo "MAIN3 without_v Tag: $MAIN3_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN3 without_v New tag: $MAIN3_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN3 without_v Part: $MAIN3_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> MAIN tests with_v, bump none: (should be the same old tag no change regardless of what original tag contains or not v)\n" >> $GITHUB_STEP_SUMMARY
          
          echo "MAIN4 with_v Tag: $MAIN4_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN4 with_v New tag: $MAIN4_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN4 with_v Part: $MAIN4_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY
          
          echo -e "> MAIN tests with_v, bump patch:\n" >> $GITHUB_STEP_SUMMARY
          
          echo "MAIN5 with_v Tag: $MAIN5_OUTPUT_TAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN5 with_v New tag: $MAIN5_OUTPUT_NEWTAG" >> $GITHUB_STEP_SUMMARY
          echo "MAIN5 with_v Part: $MAIN5_OUTPUT_PART" >> $GITHUB_STEP_SUMMARY